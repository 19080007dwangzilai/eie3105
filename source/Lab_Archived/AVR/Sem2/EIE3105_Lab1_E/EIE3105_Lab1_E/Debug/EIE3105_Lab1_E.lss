
EIE3105_Lab1_E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  0080011e  0080011e  0000047a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000855  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a8  00000000  00000000  00000d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041e  00000000  00000000  00001439  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041c  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f4  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_18>
  4c:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ca 01 	call	0x394	; 0x394 <main>
  9e:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pwm_init>:
unsigned int pwm_ic = 0;

void pwm_init()
{
	//	Fast PWM, Non-inverting
	TCCR0A = (1<<WGM01) | (1<<WGM00) | 
  a6:	83 ea       	ldi	r24, 0xA3	; 163
  a8:	84 bd       	out	0x24, r24	; 36
			(1<<COM0A1) | (0<<COM0A0) |
			(1<<COM0B1) | (0<<COM0B0);
	
	//	Pre = 256, Non-inverting
	TCCR0B = (1<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00);
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	85 bd       	out	0x25, r24	; 37

	//	Freq = 500Hz
	OCR0A = 124;
  ae:	8c e7       	ldi	r24, 0x7C	; 124
  b0:	87 bd       	out	0x27, r24	; 39

	//	DC
	OCR0B = 0;
  b2:	18 bc       	out	0x28, r1	; 40
  b4:	08 95       	ret

000000b6 <usart_init>:
}

void usart_init()
{
	UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<UDRIE0) | (1<<RXCIE0);
  b6:	88 eb       	ldi	r24, 0xB8	; 184
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 0x67;
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  c8:	08 95       	ret

000000ca <capture>:
}

unsigned char capture()
{
	unsigned char width;
	TCCR1A = 0;
  ca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<ICES1) | (1<<CS12) | (0<<CS11) | (0<<CS10);
  ce:	84 e4       	ldi	r24, 0x44	; 68
  d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIFR1 = (1<<ICF1);
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	86 bb       	out	0x16, r24	; 22
	while((TIFR1&(1<<ICF1)) == 0);
  d8:	b5 9b       	sbis	0x16, 5	; 22
  da:	fe cf       	rjmp	.-4      	; 0xd8 <capture+0xe>
	width = ICR1L;
  dc:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

	TIFR1 = (1<<ICF1);
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	86 bb       	out	0x16, r24	; 22
	TCCR1B = (0<<ICES1) | (1<<CS12) | (0<<CS11) | (0<<CS10);
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while((TIFR1&(1<<ICF1)) == 0);
  ea:	b5 9b       	sbis	0x16, 5	; 22
  ec:	fe cf       	rjmp	.-4      	; 0xea <capture+0x20>
	width = ICR1L - width;
  ee:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TIFR1 = (1<<ICF1);
  f2:	20 e2       	ldi	r18, 0x20	; 32
  f4:	26 bb       	out	0x16, r18	; 22

	return width;
}
  f6:	89 1b       	sub	r24, r25
  f8:	08 95       	ret

000000fa <measure>:

void measure()
{
	result = capture();
  fa:	0e 94 65 00 	call	0xca	; 0xca <capture>
  fe:	48 2f       	mov	r20, r24
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <result+0x1>
 106:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <result>
	if ((result/100) == 0)
 10a:	44 36       	cpi	r20, 0x64	; 100
 10c:	51 05       	cpc	r21, r1
 10e:	20 f5       	brcc	.+72     	; 0x158 <measure+0x5e>
	{	
		str_res[0] = (unsigned char)((result/10) + 48);
 110:	e4 e2       	ldi	r30, 0x24	; 36
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	9a 01       	movw	r18, r20
 116:	ad ec       	ldi	r26, 0xCD	; 205
 118:	bc ec       	ldi	r27, 0xCC	; 204
 11a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__umulhisi3>
 11e:	96 95       	lsr	r25
 120:	87 95       	ror	r24
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	20 e3       	ldi	r18, 0x30	; 48
 12c:	28 0f       	add	r18, r24
 12e:	20 83       	st	Z, r18
		str_res[1] = (unsigned char)(result%10 + 48);
 130:	9c 01       	movw	r18, r24
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	82 0f       	add	r24, r18
 144:	93 1f       	adc	r25, r19
 146:	48 1b       	sub	r20, r24
 148:	59 0b       	sbc	r21, r25
 14a:	40 5d       	subi	r20, 0xD0	; 208
 14c:	41 83       	std	Z+1, r20	; 0x01
		str_res[2] = '\n';
 14e:	8a e0       	ldi	r24, 0x0A	; 10
 150:	82 83       	std	Z+2, r24	; 0x02
		str_res[3] = 13;
 152:	8d e0       	ldi	r24, 0x0D	; 13
 154:	83 83       	std	Z+3, r24	; 0x03
 156:	30 c0       	rjmp	.+96     	; 0x1b8 <measure+0xbe>
	}
	else
	{
		str_res[0] = (unsigned char)((result/100) + 48);
 158:	e4 e2       	ldi	r30, 0x24	; 36
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	9a 01       	movw	r18, r20
 15e:	36 95       	lsr	r19
 160:	27 95       	ror	r18
 162:	36 95       	lsr	r19
 164:	27 95       	ror	r18
 166:	ab e7       	ldi	r26, 0x7B	; 123
 168:	b4 e1       	ldi	r27, 0x14	; 20
 16a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__umulhisi3>
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	80 5d       	subi	r24, 0xD0	; 208
 174:	80 83       	st	Z, r24
		str_res[1] = (unsigned char)((result/10) + 48);
 176:	9a 01       	movw	r18, r20
 178:	ad ec       	ldi	r26, 0xCD	; 205
 17a:	bc ec       	ldi	r27, 0xCC	; 204
 17c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__umulhisi3>
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	20 e3       	ldi	r18, 0x30	; 48
 18e:	28 0f       	add	r18, r24
 190:	21 83       	std	Z+1, r18	; 0x01
		str_res[2] = (unsigned char)(result%10 + 48);
 192:	9c 01       	movw	r18, r24
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	82 0f       	add	r24, r18
 1a6:	93 1f       	adc	r25, r19
 1a8:	48 1b       	sub	r20, r24
 1aa:	59 0b       	sbc	r21, r25
 1ac:	40 5d       	subi	r20, 0xD0	; 208
 1ae:	42 83       	std	Z+2, r20	; 0x02
		str_res[3] = '\n';
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	83 83       	std	Z+3, r24	; 0x03
		str_res[4] = 13;
 1b4:	8d e0       	ldi	r24, 0x0D	; 13
 1b6:	84 83       	std	Z+4, r24	; 0x04
	}
	if (pwm_ic == 1)
 1b8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 1bc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	31 f4       	brne	.+12     	; 0x1d0 <measure+0xd6>
		flag_mes_done = 1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <flag_mes_done+0x1>
 1cc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <flag_mes_done>
 1d0:	08 95       	ret

000001d2 <__vector_18>:
}

ISR(USART_RX_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
	rcv = UDR0;
 1e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1e8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <rcv>
	if (rcv == 'm' || rcv == 'M')
 1ec:	98 2f       	mov	r25, r24
 1ee:	9f 7d       	andi	r25, 0xDF	; 223
 1f0:	9d 34       	cpi	r25, 0x4D	; 77
 1f2:	59 f4       	brne	.+22     	; 0x20a <__vector_18+0x38>
		pwm_ic ^= 1;
 1f4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 1f8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	82 27       	eor	r24, r18
 200:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 204:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 208:	4d c0       	rjmp	.+154    	; 0x2a4 <__vector_18+0xd2>
	else
	{
		flag_input = 1;
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <flag_input+0x1>
 212:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <flag_input>
		rcv_store = rcv;
 216:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <rcv_store>
		if (rcv == 13)
 21a:	8d 30       	cpi	r24, 0x0D	; 13
 21c:	a1 f5       	brne	.+104    	; 0x286 <__vector_18+0xb4>
		{
			if (rcv_0 == '\0')
 21e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <rcv_0>
 222:	81 11       	cpse	r24, r1
 224:	09 c0       	rjmp	.+18     	; 0x238 <__vector_18+0x66>
			{	
				flag_non_in = 1;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <flag_non_in+0x1>
 22e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <flag_non_in>
				rcv = '\0';
 232:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <rcv>
 236:	36 c0       	rjmp	.+108    	; 0x2a4 <__vector_18+0xd2>
			}
			else if (rcv_1 == '\0')
 238:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <rcv_1>
 23c:	91 11       	cpse	r25, r1
 23e:	0d c0       	rjmp	.+26     	; 0x25a <__vector_18+0x88>
			{
				OCR0B = rcv_0 - 48;
 240:	80 53       	subi	r24, 0x30	; 48
 242:	88 bd       	out	0x28, r24	; 40
				flag_change = 1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <flag_change+0x1>
 24c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <flag_change>
				rcv_0 = '\0';
 250:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rcv_0>
				rcv = '\0';
 254:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <rcv>
 258:	25 c0       	rjmp	.+74     	; 0x2a4 <__vector_18+0xd2>
			}
			else
			{
				OCR0B = (rcv_1 - 48) * 10 + (rcv_0 - 48);
 25a:	99 0f       	add	r25, r25
 25c:	90 56       	subi	r25, 0x60	; 96
 25e:	29 2f       	mov	r18, r25
 260:	22 0f       	add	r18, r18
 262:	22 0f       	add	r18, r18
 264:	92 0f       	add	r25, r18
 266:	80 53       	subi	r24, 0x30	; 48
 268:	89 0f       	add	r24, r25
 26a:	88 bd       	out	0x28, r24	; 40
				flag_change = 1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <flag_change+0x1>
 274:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <flag_change>
				rcv_0 = '\0';
 278:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rcv_0>
				rcv_1 = '\0';
 27c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <rcv_1>
				rcv = '\0';
 280:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <rcv>
 284:	0f c0       	rjmp	.+30     	; 0x2a4 <__vector_18+0xd2>
			}
		}
		else if (rcv_0 == '\0')
 286:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <rcv_0>
 28a:	91 11       	cpse	r25, r1
 28c:	05 c0       	rjmp	.+10     	; 0x298 <__vector_18+0xc6>
		{
			rcv_0 = rcv;
 28e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <rcv_0>
			rcv = '\0';
 292:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <rcv>
 296:	06 c0       	rjmp	.+12     	; 0x2a4 <__vector_18+0xd2>
		}
		else
		{
			rcv_1 = rcv_0;
 298:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <rcv_1>
			rcv_0 = rcv;
 29c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <rcv_0>
			rcv = '\0';
 2a0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <rcv>
		}
	}
};
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <__vector_19>:

ISR(USART_UDRE_vect)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	if (flag_non_in == 1)
 2c8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <flag_non_in>
 2cc:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <flag_non_in+0x1>
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f4       	brne	.+60     	; 0x310 <__vector_19+0x5a>
	{
		if (str_err[loc] != '\0')
 2d4:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <loc>
 2d8:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <loc+0x1>
 2dc:	e0 50       	subi	r30, 0x00	; 0
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	80 81       	ld	r24, Z
 2e2:	88 23       	and	r24, r24
 2e4:	61 f0       	breq	.+24     	; 0x2fe <__vector_19+0x48>
		{
			UDR0 = str_err[loc];
 2e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			loc++;
 2ea:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <loc>
 2ee:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <loc+0x1>
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <loc+0x1>
 2f8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <loc>
 2fc:	42 c0       	rjmp	.+132    	; 0x382 <__vector_19+0xcc>
		}
		else
		{	
			loc = 0;
 2fe:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <loc+0x1>
 302:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <loc>
			flag_non_in = 0;
 306:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <flag_non_in+0x1>
 30a:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <flag_non_in>
 30e:	39 c0       	rjmp	.+114    	; 0x382 <__vector_19+0xcc>
		}
	}
	else if (flag_input == 1)
 310:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <flag_input>
 314:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <flag_input+0x1>
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	81 f4       	brne	.+32     	; 0x33c <__vector_19+0x86>
	{
		UDR0 = rcv_store;
 31c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <rcv_store>
 320:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		if (rcv_store == 13)
 324:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <rcv_store>
 328:	8d 30       	cpi	r24, 0x0D	; 13
 32a:	19 f4       	brne	.+6      	; 0x332 <__vector_19+0x7c>
			UDR0 = '\n';
 32c:	8a e0       	ldi	r24, 0x0A	; 10
 32e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		flag_input = 0;
 332:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <flag_input+0x1>
 336:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <flag_input>
 33a:	23 c0       	rjmp	.+70     	; 0x382 <__vector_19+0xcc>
	}
	else if (flag_mes_done == 1)
 33c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <flag_mes_done>
 340:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <flag_mes_done+0x1>
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	e9 f4       	brne	.+58     	; 0x382 <__vector_19+0xcc>
	{
		if (str_res[loc] != '\0')
 348:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <loc>
 34c:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <loc+0x1>
 350:	ec 5d       	subi	r30, 0xDC	; 220
 352:	fe 4f       	sbci	r31, 0xFE	; 254
 354:	80 81       	ld	r24, Z
 356:	88 23       	and	r24, r24
 358:	61 f0       	breq	.+24     	; 0x372 <__vector_19+0xbc>
		{
			UDR0 = str_res[loc];
 35a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			loc++;
 35e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <loc>
 362:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <loc+0x1>
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <loc+0x1>
 36c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <loc>
 370:	08 c0       	rjmp	.+16     	; 0x382 <__vector_19+0xcc>
		}
		else
		{
			loc = 0;
 372:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <loc+0x1>
 376:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <loc>
			flag_mes_done = 0;
 37a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <flag_mes_done+0x1>
 37e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <flag_mes_done>
		}
	}
};
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <main>:

int main(void)
{
	DDRD |= (1<<DDD5);
 394:	55 9a       	sbi	0x0a, 5	; 10
	usart_init();
 396:	0e 94 5b 00 	call	0xb6	; 0xb6 <usart_init>
    pwm_init();
 39a:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm_init>
	sei();
 39e:	78 94       	sei

    while (1) 
    {
		measure();
 3a0:	0e 94 7d 00 	call	0xfa	; 0xfa <measure>
 3a4:	fd cf       	rjmp	.-6      	; 0x3a0 <main+0xc>

000003a6 <__umulhisi3>:
 3a6:	a2 9f       	mul	r26, r18
 3a8:	b0 01       	movw	r22, r0
 3aa:	b3 9f       	mul	r27, r19
 3ac:	c0 01       	movw	r24, r0
 3ae:	a3 9f       	mul	r26, r19
 3b0:	70 0d       	add	r23, r0
 3b2:	81 1d       	adc	r24, r1
 3b4:	11 24       	eor	r1, r1
 3b6:	91 1d       	adc	r25, r1
 3b8:	b2 9f       	mul	r27, r18
 3ba:	70 0d       	add	r23, r0
 3bc:	81 1d       	adc	r24, r1
 3be:	11 24       	eor	r1, r1
 3c0:	91 1d       	adc	r25, r1
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
