
EIE3105_Lab3_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000040e  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  000004a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ad  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065c  00000000  00000000  00000d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f8  00000000  00000000  0000135d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_2>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_11>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	7d 00       	.word	0x007d	; ????
  6a:	a5 00       	.word	0x00a5	; ????
  6c:	c9 00       	.word	0x00c9	; ????
  6e:	ed 00       	.word	0x00ed	; ????
  70:	11 01       	movw	r2, r2
  72:	35 01       	movw	r6, r10
  74:	65 01       	movw	r12, r10
  76:	88 01       	movw	r16, r16

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ee e0       	ldi	r30, 0x0E	; 14
  8c:	f4 e0       	ldi	r31, 0x04	; 4
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	a2 e0       	ldi	r26, 0x02	; 2
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a6 30       	cpi	r26, 0x06	; 6
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  ae:	0c 94 05 02 	jmp	0x40a	; 0x40a <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <reset>:
    }
}

void reset()
{
	count = 0;
  b6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
  ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	if (stage == 7)
  be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <stage>
  c2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <stage+0x1>
  c6:	87 30       	cpi	r24, 0x07	; 7
  c8:	91 05       	cpc	r25, r1
  ca:	29 f4       	brne	.+10     	; 0xd6 <reset+0x20>
		stage = 0;
  cc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <stage+0x1>
  d0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <stage>
  d4:	08 95       	ret
	else
		stage++;
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <stage+0x1>
  dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <stage>
  e0:	08 95       	ret

000000e2 <led_light>:
}

void led_light()
{
	switch(stage)
  e2:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <stage>
  e6:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <stage+0x1>
  ea:	e8 30       	cpi	r30, 0x08	; 8
  ec:	f1 05       	cpc	r31, r1
  ee:	08 f0       	brcs	.+2      	; 0xf2 <led_light+0x10>
  f0:	31 c1       	rjmp	.+610    	; 0x354 <led_light+0x272>
  f2:	ec 5c       	subi	r30, 0xCC	; 204
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__tablejump2__>
	{
		case 0:
		{
			if (!flag)
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 102:	89 2b       	or	r24, r25
 104:	81 f4       	brne	.+32     	; 0x126 <led_light+0x44>
			{
				if (count == 25)
 106:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 10a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 10e:	49 97       	sbiw	r24, 0x19	; 25
 110:	39 f4       	brne	.+14     	; 0x120 <led_light+0x3e>
				{
					PORTC |= 1<<5;
 112:	45 9a       	sbi	0x08, 5	; 8
					PORTC &= ~(1<<4);	//	Light 1 Red
 114:	44 98       	cbi	0x08, 4	; 8
					PORTB = 0x11;		//	Light 2 Yellow Light 3 Red
 116:	81 e1       	ldi	r24, 0x11	; 17
 118:	85 b9       	out	0x05, r24	; 5
					reset();
 11a:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
					break;
 11e:	08 95       	ret
				}
				PORTC = 0;
 120:	18 b8       	out	0x08, r1	; 8
				PORTB = 0;
 122:	15 b8       	out	0x05, r1	; 5
				break;
 124:	08 95       	ret
			}
			else if (count != 25)
 126:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 12a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 12e:	49 97       	sbiw	r24, 0x19	; 25
 130:	29 f0       	breq	.+10     	; 0x13c <led_light+0x5a>
			{
				PORTC |= 1<<5;
 132:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 134:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x21;		//	Light 2 Green Light 3 Red
 136:	81 e2       	ldi	r24, 0x21	; 33
 138:	85 b9       	out	0x05, r24	; 5
				break;
 13a:	08 95       	ret
			}
			else if (count == 25)
			{
				PORTC |= 1<<5;
 13c:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 13e:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x11;		//	Light 2 Yellow Light 3 Red
 140:	81 e1       	ldi	r24, 0x11	; 17
 142:	85 b9       	out	0x05, r24	; 5
				reset();
 144:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
				break;
 148:	08 95       	ret
			}
		}
		case 1:
		{
			if (!flag)
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 152:	89 2b       	or	r24, r25
 154:	81 f4       	brne	.+32     	; 0x176 <led_light+0x94>
			{
				if (count == 5)
 156:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 15a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 15e:	05 97       	sbiw	r24, 0x05	; 5
 160:	39 f4       	brne	.+14     	; 0x170 <led_light+0x8e>
				{
					PORTC |= 1<<5;
 162:	45 9a       	sbi	0x08, 5	; 8
					PORTC &= ~(1<<4);	//	Light 1 Red
 164:	44 98       	cbi	0x08, 4	; 8
					PORTB = 0x09;		//	Light 2 Red Light 3 Red
 166:	89 e0       	ldi	r24, 0x09	; 9
 168:	85 b9       	out	0x05, r24	; 5
					reset();
 16a:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
					break;
 16e:	08 95       	ret
				}
				PORTC = 0;
 170:	18 b8       	out	0x08, r1	; 8
				PORTB = 0;
 172:	15 b8       	out	0x05, r1	; 5
				break;
 174:	08 95       	ret
			}
			else if (count != 5)
 176:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 17a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 17e:	05 97       	sbiw	r24, 0x05	; 5
 180:	09 f0       	breq	.+2      	; 0x184 <led_light+0xa2>
 182:	e8 c0       	rjmp	.+464    	; 0x354 <led_light+0x272>
				break;
			else if (count == 5)
			{
				PORTC |= 1<<5;
 184:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 186:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x09;		//	Light 2 Red Light 3 Red
 188:	89 e0       	ldi	r24, 0x09	; 9
 18a:	85 b9       	out	0x05, r24	; 5
				reset();
 18c:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
				break;
 190:	08 95       	ret
			}
		}
		case 2:
		{
			if (!flag)
 192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 196:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 19a:	89 2b       	or	r24, r25
 19c:	81 f4       	brne	.+32     	; 0x1be <led_light+0xdc>
			{
				if (count == 5)
 19e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1a2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1a6:	05 97       	sbiw	r24, 0x05	; 5
 1a8:	39 f4       	brne	.+14     	; 0x1b8 <led_light+0xd6>
				{
					PORTC |= 1<<5;
 1aa:	45 9a       	sbi	0x08, 5	; 8
					PORTC &= ~(1<<4);	//	Light 1 Red
 1ac:	44 98       	cbi	0x08, 4	; 8
					PORTB = 0x0B;		// Light 2 Red Light 3 Red + Yellow
 1ae:	8b e0       	ldi	r24, 0x0B	; 11
 1b0:	85 b9       	out	0x05, r24	; 5
					reset();
 1b2:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
					break;
 1b6:	08 95       	ret
				}
				PORTC = 0;
 1b8:	18 b8       	out	0x08, r1	; 8
				PORTB = 0;
 1ba:	15 b8       	out	0x05, r1	; 5
				break;
 1bc:	08 95       	ret
			}
			else if (count != 5)
 1be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1c2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1c6:	05 97       	sbiw	r24, 0x05	; 5
 1c8:	09 f0       	breq	.+2      	; 0x1cc <led_light+0xea>
 1ca:	c4 c0       	rjmp	.+392    	; 0x354 <led_light+0x272>
				break;
			else if (count == 5)
			{
				PORTC |= 1<<5;
 1cc:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 1ce:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x0B;		// Light 2 Red Light 3 Red + Yellow
 1d0:	8b e0       	ldi	r24, 0x0B	; 11
 1d2:	85 b9       	out	0x05, r24	; 5
				reset();
 1d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
				break;
 1d8:	08 95       	ret
			}
		}
		case 3:
		{
			if (!flag)
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e2:	89 2b       	or	r24, r25
 1e4:	81 f4       	brne	.+32     	; 0x206 <led_light+0x124>
			{
				if (count == 5)
 1e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1ea:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1ee:	05 97       	sbiw	r24, 0x05	; 5
 1f0:	39 f4       	brne	.+14     	; 0x200 <led_light+0x11e>
				{
					PORTC |= 1<<4;
 1f2:	44 9a       	sbi	0x08, 4	; 8
					PORTC &= ~(1<<5);	//	Light 1 Green
 1f4:	45 98       	cbi	0x08, 5	; 8
					PORTB = 0x0C;		//	Light 2 Red Light 3 Green
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
 1f8:	85 b9       	out	0x05, r24	; 5
					reset();
 1fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
					break;
 1fe:	08 95       	ret
				}
				PORTC = 0;
 200:	18 b8       	out	0x08, r1	; 8
				PORTB = 0;
 202:	15 b8       	out	0x05, r1	; 5
				break;
 204:	08 95       	ret
			}
			else if (count != 5)
 206:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 20a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 20e:	05 97       	sbiw	r24, 0x05	; 5
 210:	09 f0       	breq	.+2      	; 0x214 <led_light+0x132>
 212:	a0 c0       	rjmp	.+320    	; 0x354 <led_light+0x272>
				break;
			else if (count == 5)
			{
				PORTC |= 1<<4;
 214:	44 9a       	sbi	0x08, 4	; 8
				PORTC &= ~(1<<5);	//	Light 1 Green
 216:	45 98       	cbi	0x08, 5	; 8
				PORTB = 0x0C;		//	Light 2 Red Light 3 Green
 218:	8c e0       	ldi	r24, 0x0C	; 12
 21a:	85 b9       	out	0x05, r24	; 5
				reset();
 21c:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
				break;
 220:	08 95       	ret
			}
		}
		case 4:
		{
			if (!flag)
 222:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 226:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 22a:	89 2b       	or	r24, r25
 22c:	81 f4       	brne	.+32     	; 0x24e <led_light+0x16c>
			{
				if (count == 25)
 22e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 232:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 236:	49 97       	sbiw	r24, 0x19	; 25
 238:	39 f4       	brne	.+14     	; 0x248 <led_light+0x166>
				{
					PORTC |= 1<<4;
 23a:	44 9a       	sbi	0x08, 4	; 8
					PORTC &= ~(1<<5);	//	Light 1 Green
 23c:	45 98       	cbi	0x08, 5	; 8
					PORTB = 0x0C;		// Light 2 Red Light 3 Green
 23e:	8c e0       	ldi	r24, 0x0C	; 12
 240:	85 b9       	out	0x05, r24	; 5
					reset();
 242:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
					break;
 246:	08 95       	ret
				}
				PORTC = 0;
 248:	18 b8       	out	0x08, r1	; 8
				PORTB = 0;
 24a:	15 b8       	out	0x05, r1	; 5
				break;
 24c:	08 95       	ret
			}
			else if (count != 25)
 24e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 252:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 256:	49 97       	sbiw	r24, 0x19	; 25
 258:	09 f0       	breq	.+2      	; 0x25c <led_light+0x17a>
 25a:	7c c0       	rjmp	.+248    	; 0x354 <led_light+0x272>
				break;
			else if (count == 25)
			{
				PORTC |= 1<<4;
 25c:	44 9a       	sbi	0x08, 4	; 8
				PORTC &= ~(1<<5);	//	Light 1 Green
 25e:	45 98       	cbi	0x08, 5	; 8
				PORTB = 0x0C;		// Light 2 Red Light 3 Green
 260:	8c e0       	ldi	r24, 0x0C	; 12
 262:	85 b9       	out	0x05, r24	; 5
				reset();
 264:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
				break;
 268:	08 95       	ret
			}
		}
		case 5:
		{
			if (!flag)
 26a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 26e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 272:	89 2b       	or	r24, r25
 274:	81 f4       	brne	.+32     	; 0x296 <led_light+0x1b4>
			{
				if (count == 5)
 276:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 27a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 27e:	05 97       	sbiw	r24, 0x05	; 5
 280:	39 f4       	brne	.+14     	; 0x290 <led_light+0x1ae>
				{
					PORTC |= 1<<5;
 282:	45 9a       	sbi	0x08, 5	; 8
					PORTC &= ~(1<<4);	//	Light 1 Red
 284:	44 98       	cbi	0x08, 4	; 8
					PORTB = 0x09;		//	Light 2 Red Light 3 Red
 286:	89 e0       	ldi	r24, 0x09	; 9
 288:	85 b9       	out	0x05, r24	; 5
					reset();
 28a:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
					break;
 28e:	08 95       	ret
				}
				PORTC = 0;
 290:	18 b8       	out	0x08, r1	; 8
				PORTB = 0;
 292:	15 b8       	out	0x05, r1	; 5
				break;
 294:	08 95       	ret
			}
			else if (count == 5)
 296:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 29a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 29e:	85 30       	cpi	r24, 0x05	; 5
 2a0:	91 05       	cpc	r25, r1
 2a2:	39 f4       	brne	.+14     	; 0x2b2 <led_light+0x1d0>
			{
				PORTC |= 1<<5;
 2a4:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 2a6:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x09;		//	Light 2 Red Light 3 Red
 2a8:	89 e0       	ldi	r24, 0x09	; 9
 2aa:	85 b9       	out	0x05, r24	; 5
				reset();
 2ac:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
				break;
 2b0:	08 95       	ret
			}
			else if (count % 2 == 0)
 2b2:	80 fd       	sbrc	r24, 0
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <led_light+0x1de>
			{
				PORTC |= 1<<4;
 2b6:	44 9a       	sbi	0x08, 4	; 8
				PORTC &= ~(1<<5);	//	Light 1 Green
 2b8:	45 98       	cbi	0x08, 5	; 8
				PORTB = 0x0A;		// Light 2 Red Light 3 Yellow
 2ba:	8a e0       	ldi	r24, 0x0A	; 10
 2bc:	85 b9       	out	0x05, r24	; 5
				break;
 2be:	08 95       	ret
			}
			else
			{
				PORTC &= ~(1<<4);
 2c0:	44 98       	cbi	0x08, 4	; 8
				PORTC &= ~(1<<5);	//	Light 1 OFF Blinking
 2c2:	45 98       	cbi	0x08, 5	; 8
				PORTB = 0x0A;		// Light 2 Red Light 3 Yellow
 2c4:	8a e0       	ldi	r24, 0x0A	; 10
 2c6:	85 b9       	out	0x05, r24	; 5
				break;
 2c8:	08 95       	ret
			}
		}
		case 6:
		{
			if (!flag)
 2ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2d2:	89 2b       	or	r24, r25
 2d4:	81 f4       	brne	.+32     	; 0x2f6 <led_light+0x214>
			{
				if (count == 5)
 2d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 2de:	05 97       	sbiw	r24, 0x05	; 5
 2e0:	39 f4       	brne	.+14     	; 0x2f0 <led_light+0x20e>
				{
					PORTC |= 1<<5;
 2e2:	45 9a       	sbi	0x08, 5	; 8
					PORTC &= ~(1<<4);	//	Light 1 Red
 2e4:	44 98       	cbi	0x08, 4	; 8
					PORTB = 0x19;		//	Light 1 Red Light 2 Red + Yellow Light 3 Red
 2e6:	89 e1       	ldi	r24, 0x19	; 25
 2e8:	85 b9       	out	0x05, r24	; 5
					reset();
 2ea:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
					break;
 2ee:	08 95       	ret
				}
				PORTC = 0;
 2f0:	18 b8       	out	0x08, r1	; 8
				PORTB = 0;
 2f2:	15 b8       	out	0x05, r1	; 5
				break;
 2f4:	08 95       	ret
			}
			else if (count != 5)
 2f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 2fe:	05 97       	sbiw	r24, 0x05	; 5
 300:	49 f5       	brne	.+82     	; 0x354 <led_light+0x272>
				break;
			else if (count == 5)
			{
				PORTC |= 1<<5;
 302:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 304:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x19;		//	Light 1 Red Light 2 Red + Yellow Light 3 Red
 306:	89 e1       	ldi	r24, 0x19	; 25
 308:	85 b9       	out	0x05, r24	; 5
				reset();
 30a:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
				break;
 30e:	08 95       	ret
			}
		}
		case 7:
		{
			if (!flag)
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 314:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 318:	89 2b       	or	r24, r25
 31a:	81 f4       	brne	.+32     	; 0x33c <led_light+0x25a>
			{
				if (count == 5)
 31c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 320:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 324:	05 97       	sbiw	r24, 0x05	; 5
 326:	39 f4       	brne	.+14     	; 0x336 <led_light+0x254>
				{
					PORTC |= 1<<5;
 328:	45 9a       	sbi	0x08, 5	; 8
					PORTC &= ~(1<<4);	//	Light 1 Red
 32a:	44 98       	cbi	0x08, 4	; 8
					PORTB = 0x21;		//	Light 2 Green Light 3 Red
 32c:	81 e2       	ldi	r24, 0x21	; 33
 32e:	85 b9       	out	0x05, r24	; 5
					reset();
 330:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
					break;
 334:	08 95       	ret
				}
				PORTC = 0;
 336:	18 b8       	out	0x08, r1	; 8
				PORTB = 0;
 338:	15 b8       	out	0x05, r1	; 5
				break;
 33a:	08 95       	ret
			}
			else if (count != 5)
				break;
			else if (count == 5)
 33c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 340:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 344:	05 97       	sbiw	r24, 0x05	; 5
 346:	31 f4       	brne	.+12     	; 0x354 <led_light+0x272>
			{
				PORTC |= 1<<5;
 348:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 34a:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x21;		//	Light 2 Green Light 3 Red
 34c:	81 e2       	ldi	r24, 0x21	; 33
 34e:	85 b9       	out	0x05, r24	; 5
				reset();
 350:	0e 94 5b 00 	call	0xb6	; 0xb6 <reset>
 354:	08 95       	ret

00000356 <main>:
unsigned int flag = 1;
void led_light();

int main(void)
{
    DDRB = 0x3F;			// PB0 - 5 as Output
 356:	8f e3       	ldi	r24, 0x3F	; 63
 358:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x31;			// PC0, 4 - 5 as Output
 35a:	81 e3       	ldi	r24, 0x31	; 49
 35c:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;			// PD2 Input
 35e:	1a b8       	out	0x0a, r1	; 10
	PORTB = 0x00;			// Initial LOW
 360:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;			// Initial LOW
 362:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x08;			// Pull Up
 364:	88 e0       	ldi	r24, 0x08	; 8
 366:	8b b9       	out	0x0b, r24	; 11

	OCR1AH = 0x0C;
 368:	9c e0       	ldi	r25, 0x0C	; 12
 36a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = 0x35;
 36e:	95 e3       	ldi	r25, 0x35	; 53
 370:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A = 0x00;
 374:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x0D;
 378:	9d e0       	ldi	r25, 0x0D	; 13
 37a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	TIMSK1 = (1<<OCIE1A);
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	EIMSK = (1<<INT1);
 384:	9d bb       	out	0x1d, r25	; 29
	EICRA = 0x08;
 386:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	sei();
 38a:	78 94       	sei
    
	while (1)				// INF Loop
    {
		led_light();
 38c:	0e 94 71 00 	call	0xe2	; 0xe2 <led_light>
 390:	fd cf       	rjmp	.-6      	; 0x38c <main+0x36>

00000392 <__vector_2>:
		}
	}
}

ISR (INT1_vect)
{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
	if (flag)
 3a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3a8:	89 2b       	or	r24, r25
 3aa:	29 f0       	breq	.+10     	; 0x3b6 <__vector_2+0x24>
		flag = 0;
 3ac:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 3b0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <__vector_2+0x30>
	else 
		flag = 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
	count++;
 3de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 3ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <__tablejump2__>:
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	05 90       	lpm	r0, Z+
 404:	f4 91       	lpm	r31, Z
 406:	e0 2d       	mov	r30, r0
 408:	09 94       	ijmp

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
