
EIE3105_Lab3_B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000763  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065c  00000000  00000000  00000b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041e  00000000  00000000  00001187  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_1>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_11>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	72 00       	.word	0x0072	; ????
  6a:	84 00       	.word	0x0084	; ????
  6c:	92 00       	.word	0x0092	; ????
  6e:	a0 00       	.word	0x00a0	; ????
  70:	ae 00       	.word	0x00ae	; ????
  72:	bb 00       	.word	0x00bb	; ????
  74:	d5 00       	.word	0x00d5	; ????
  76:	e2 00       	.word	0x00e2	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_clear_bss>:
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a6 30       	cpi	r26, 0x06	; 6
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  98:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <reset>:
    }
}

void reset()
{
	count = 0;
  a0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count+0x1>
  a4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count>
	if (stage == 7)
  a8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <stage>
  ac:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <stage+0x1>
  b0:	87 30       	cpi	r24, 0x07	; 7
  b2:	91 05       	cpc	r25, r1
  b4:	29 f4       	brne	.+10     	; 0xc0 <reset+0x20>
		stage = 0;
  b6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <stage+0x1>
  ba:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <stage>
  be:	08 95       	ret
	else
		stage++;
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <stage+0x1>
  c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <stage>
  ca:	08 95       	ret

000000cc <led_light>:
}

void led_light()
{
	switch(stage)
  cc:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <stage>
  d0:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <stage+0x1>
  d4:	e8 30       	cpi	r30, 0x08	; 8
  d6:	f1 05       	cpc	r31, r1
  d8:	08 f0       	brcs	.+2      	; 0xdc <led_light+0x10>
  da:	80 c0       	rjmp	.+256    	; 0x1dc <led_light+0x110>
  dc:	ec 5c       	subi	r30, 0xCC	; 204
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	0c 94 49 01 	jmp	0x292	; 0x292 <__tablejump2__>
	{
		case 0:
		{
			if (count != 25)
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
  e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
  ec:	49 97       	sbiw	r24, 0x19	; 25
  ee:	29 f0       	breq	.+10     	; 0xfa <led_light+0x2e>
			{
				PORTC |= 1<<5;
  f0:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
  f2:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x21;		//	Light 2 Green Light 3 Red
  f4:	81 e2       	ldi	r24, 0x21	; 33
  f6:	85 b9       	out	0x05, r24	; 5
				break;
  f8:	08 95       	ret
			}
			else if (count == 25)
			{
				PORTC |= 1<<5;
  fa:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
  fc:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x11;		//	Light 2 Yellow Light 3 Red
  fe:	81 e1       	ldi	r24, 0x11	; 17
 100:	85 b9       	out	0x05, r24	; 5
				reset();
 102:	0e 94 50 00 	call	0xa0	; 0xa0 <reset>
				break;
 106:	08 95       	ret
			}
		}
		case 1:
		{
			if (count != 5)
 108:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 10c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 110:	05 97       	sbiw	r24, 0x05	; 5
 112:	09 f0       	breq	.+2      	; 0x116 <led_light+0x4a>
 114:	63 c0       	rjmp	.+198    	; 0x1dc <led_light+0x110>
			break;
			else if (count == 5)
			{
				PORTC |= 1<<5;
 116:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 118:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x09;		//	Light 2 Red Light 3 Red
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	85 b9       	out	0x05, r24	; 5
				reset();
 11e:	0e 94 50 00 	call	0xa0	; 0xa0 <reset>
				break;
 122:	08 95       	ret
			}
		}
		case 2:
		{
			if (count != 5)
 124:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 128:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 12c:	05 97       	sbiw	r24, 0x05	; 5
 12e:	09 f0       	breq	.+2      	; 0x132 <led_light+0x66>
 130:	55 c0       	rjmp	.+170    	; 0x1dc <led_light+0x110>
			break;
			else if (count == 5)
			{
				PORTC |= 1<<5;
 132:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 134:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x0B;		// Light 2 Red Light 3 Red + Yellow
 136:	8b e0       	ldi	r24, 0x0B	; 11
 138:	85 b9       	out	0x05, r24	; 5
				reset();
 13a:	0e 94 50 00 	call	0xa0	; 0xa0 <reset>
				break;
 13e:	08 95       	ret
			}
		}
		case 3:
		{
			if (count != 5)
 140:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 144:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 148:	05 97       	sbiw	r24, 0x05	; 5
 14a:	09 f0       	breq	.+2      	; 0x14e <led_light+0x82>
 14c:	47 c0       	rjmp	.+142    	; 0x1dc <led_light+0x110>
			break;
			else if (count == 5)
			{
				PORTC |= 1<<4;
 14e:	44 9a       	sbi	0x08, 4	; 8
				PORTC &= ~(1<<5);	//	Light 1 Green
 150:	45 98       	cbi	0x08, 5	; 8
				PORTB = 0x0C;		//	Light 2 Red Light 3 Green
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	85 b9       	out	0x05, r24	; 5
				reset();
 156:	0e 94 50 00 	call	0xa0	; 0xa0 <reset>
				break;
 15a:	08 95       	ret
			}
		}
		case 4:
		{
			if (count != 25)
 15c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 160:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 164:	49 97       	sbiw	r24, 0x19	; 25
 166:	d1 f5       	brne	.+116    	; 0x1dc <led_light+0x110>
			break;
			else if (count == 25)
			{
				PORTC |= 1<<4;
 168:	44 9a       	sbi	0x08, 4	; 8
				PORTC &= ~(1<<5);	//	Light 1 Green
 16a:	45 98       	cbi	0x08, 5	; 8
				PORTB = 0x0C;		// Light 2 Red Light 3 Green
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	85 b9       	out	0x05, r24	; 5
				reset();
 170:	0e 94 50 00 	call	0xa0	; 0xa0 <reset>
				break;
 174:	08 95       	ret
			}
		}
		case 5:
		{
			if (count == 5)
 176:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 17a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 17e:	85 30       	cpi	r24, 0x05	; 5
 180:	91 05       	cpc	r25, r1
 182:	39 f4       	brne	.+14     	; 0x192 <led_light+0xc6>
			{
				PORTC |= 1<<5;
 184:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 186:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x09;		//	Light 2 Red Light 3 Red
 188:	89 e0       	ldi	r24, 0x09	; 9
 18a:	85 b9       	out	0x05, r24	; 5
				reset();
 18c:	0e 94 50 00 	call	0xa0	; 0xa0 <reset>
				break;
 190:	08 95       	ret
			}
			else if (count % 2 == 0)
 192:	80 fd       	sbrc	r24, 0
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <led_light+0xd4>
			{
				PORTC |= 1<<4;
 196:	44 9a       	sbi	0x08, 4	; 8
				PORTC &= ~(1<<5);	//	Light 1 Green
 198:	45 98       	cbi	0x08, 5	; 8
				PORTB = 0x0A;		// Light 2 Red Light 3 Yellow
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	85 b9       	out	0x05, r24	; 5
				break;
 19e:	08 95       	ret
			}
			else
			{
				PORTC &= ~(1<<4);
 1a0:	44 98       	cbi	0x08, 4	; 8
				PORTC &= ~(1<<5);	//	Light 1 OFF Blinking
 1a2:	45 98       	cbi	0x08, 5	; 8
				PORTB = 0x0A;		// Light 2 Red Light 3 Yellow
 1a4:	8a e0       	ldi	r24, 0x0A	; 10
 1a6:	85 b9       	out	0x05, r24	; 5
				break;
 1a8:	08 95       	ret
			}
		}
		case 6:
		{
			if (count != 5)
 1aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 1ae:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 1b2:	05 97       	sbiw	r24, 0x05	; 5
 1b4:	99 f4       	brne	.+38     	; 0x1dc <led_light+0x110>
			break;
			else if (count == 5)
			{
				PORTC |= 1<<5;
 1b6:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 1b8:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x19;		//	Light 1 Red Light 2 Red + Yellow Light 3 Red
 1ba:	89 e1       	ldi	r24, 0x19	; 25
 1bc:	85 b9       	out	0x05, r24	; 5
				reset();
 1be:	0e 94 50 00 	call	0xa0	; 0xa0 <reset>
				break;
 1c2:	08 95       	ret
		}
		case 7:
		{
			if (count != 5)
			break;
			else if (count == 5)
 1c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 1c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 1cc:	05 97       	sbiw	r24, 0x05	; 5
 1ce:	31 f4       	brne	.+12     	; 0x1dc <led_light+0x110>
			{
				PORTC |= 1<<5;
 1d0:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<4);	//	Light 1 Red
 1d2:	44 98       	cbi	0x08, 4	; 8
				PORTB = 0x21;		//	Light 2 Green Light 3 Red
 1d4:	81 e2       	ldi	r24, 0x21	; 33
 1d6:	85 b9       	out	0x05, r24	; 5
				reset();
 1d8:	0e 94 50 00 	call	0xa0	; 0xa0 <reset>
 1dc:	08 95       	ret

000001de <main>:
unsigned int intr = 0;
void led_light();

int main(void)
{
    DDRB = 0x3F;			// PB0 - 5 as Output
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x31;			// PC0, 4 - 5 as Output
 1e2:	81 e3       	ldi	r24, 0x31	; 49
 1e4:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;			// PD2 Input
 1e6:	1a b8       	out	0x0a, r1	; 10
	PORTB = 0x00;			// Initial LOW
 1e8:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;			// Initial LOW
 1ea:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x04;			// Pull Up
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	8b b9       	out	0x0b, r24	; 11

	OCR1AH = 0x0C;
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = 0x35;
 1f6:	85 e3       	ldi	r24, 0x35	; 53
 1f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A = 0x00;
 1fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x0D;
 200:	8d e0       	ldi	r24, 0x0D	; 13
 202:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	TIMSK1 = (1<<OCIE1A);
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	EIMSK = (1<<INT0);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0x03;
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	sei();
 216:	78 94       	sei
    
	while (1)				// INF Loop
    {
		led_light();
 218:	0e 94 66 00 	call	0xcc	; 0xcc <led_light>
 21c:	fd cf       	rjmp	.-6      	; 0x218 <main+0x3a>

0000021e <__vector_1>:
		}
	}
}

ISR (INT0_vect)
{
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
	if (intr != 2)
 22c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 230:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	91 05       	cpc	r25, r1
 238:	31 f0       	breq	.+12     	; 0x246 <__vector_1+0x28>
		intr++;
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 240:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 244:	08 c0       	rjmp	.+16     	; 0x256 <__vector_1+0x38>
	else if (intr == 2)
	{
		PORTC ^= 1<<0;
 246:	98 b1       	in	r25, 0x08	; 8
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	89 27       	eor	r24, r25
 24c:	88 b9       	out	0x08, r24	; 8
		intr=0;
 24e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 252:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
	count++;
 272:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 276:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
 280:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__tablejump2__>:
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	05 90       	lpm	r0, Z+
 298:	f4 91       	lpm	r31, Z
 29a:	e0 2d       	mov	r30, r0
 29c:	09 94       	ijmp

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
