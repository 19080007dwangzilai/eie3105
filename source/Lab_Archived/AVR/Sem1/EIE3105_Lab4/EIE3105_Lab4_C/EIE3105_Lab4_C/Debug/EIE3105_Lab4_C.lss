
EIE3105_Lab4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000789  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bf  00000000  00000000  00000995  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000379  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d0  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <usart_init>:

#include <avr/io.h>

void usart_init()
{
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
  80:	88 e1       	ldi	r24, 0x18	; 24
  82:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
  86:	86 e0       	ldi	r24, 0x06	; 6
  88:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 0x67;
  8c:	87 e6       	ldi	r24, 0x67	; 103
  8e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  92:	08 95       	ret

00000094 <usart_send>:
} 

void usart_send(unsigned char ch)
{
	while(!(UCSR0A &(1<<UDRE0)));
  94:	e0 ec       	ldi	r30, 0xC0	; 192
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	90 81       	ld	r25, Z
  9a:	95 ff       	sbrs	r25, 5
  9c:	fd cf       	rjmp	.-6      	; 0x98 <usart_send+0x4>
	UDR0 = ch;
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a2:	08 95       	ret

000000a4 <usart_read>:
}

void usart_read(unsigned char* ptr_ch)
{
  a4:	dc 01       	movw	r26, r24
	while(!(UCSR0A & (1<<RXC0)));
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	99 23       	and	r25, r25
  ae:	ec f7       	brge	.-6      	; 0xaa <usart_read+0x6>
	*ptr_ch = UDR0;
  b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b4:	8c 93       	st	X, r24
  b6:	08 95       	ret

000000b8 <main>:
}

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	1f 92       	push	r1
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	usart_init();
  c2:	0e 94 40 00 	call	0x80	; 0x80 <usart_init>
	const unsigned char ch = 'a';
	unsigned char ch2 = '\0';
  c6:	19 82       	std	Y+1, r1	; 0x01
    while (1) 
    {
		do
		{
			usart_send(ch);
		}while(!(UCSR0A & (1<<RXC0)));
  c8:	0f 2e       	mov	r0, r31
  ca:	f0 ec       	ldi	r31, 0xC0	; 192
  cc:	ef 2e       	mov	r14, r31
  ce:	f1 2c       	mov	r15, r1
  d0:	f0 2d       	mov	r31, r0
	unsigned char ch3 = '\0';
    while (1) 
    {
		do
		{
			usart_send(ch);
  d2:	81 e6       	ldi	r24, 0x61	; 97
  d4:	0e 94 4a 00 	call	0x94	; 0x94 <usart_send>
		}while(!(UCSR0A & (1<<RXC0)));
  d8:	f7 01       	movw	r30, r14
  da:	80 81       	ld	r24, Z
  dc:	88 23       	and	r24, r24
  de:	cc f7       	brge	.-14     	; 0xd2 <main+0x1a>
		usart_read(&ch2);
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	0e 94 52 00 	call	0xa4	; 0xa4 <usart_read>
		ch3 = ch2;
  e8:	d9 80       	ldd	r13, Y+1	; 0x01
  ea:	0a e0       	ldi	r16, 0x0A	; 10
  ec:	10 e0       	ldi	r17, 0x00	; 0
		for (unsigned int i = 0; i < 10; i++)
		{
			usart_send(ch2);
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	0e 94 4a 00 	call	0x94	; 0x94 <usart_send>
  f4:	01 50       	subi	r16, 0x01	; 1
  f6:	11 09       	sbc	r17, r1
		{
			usart_send(ch);
		}while(!(UCSR0A & (1<<RXC0)));
		usart_read(&ch2);
		ch3 = ch2;
		for (unsigned int i = 0; i < 10; i++)
  f8:	d1 f7       	brne	.-12     	; 0xee <main+0x36>
		{
			usart_send(ch2);
		}
		ch2 = '\0';
  fa:	19 82       	std	Y+1, r1	; 0x01
		do
		{
			usart_read(&ch2);
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 52 00 	call	0xa4	; 0xa4 <usart_read>
		}while (ch2 != ch3);
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	d8 12       	cpse	r13, r24
 108:	f9 cf       	rjmp	.-14     	; 0xfc <main+0x44>
 10a:	e3 cf       	rjmp	.-58     	; 0xd2 <main+0x1a>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
