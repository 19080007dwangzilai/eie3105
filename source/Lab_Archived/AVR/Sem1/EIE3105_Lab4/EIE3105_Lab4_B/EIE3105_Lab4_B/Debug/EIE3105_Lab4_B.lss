
EIE3105_Lab4_B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000001d6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007da  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d6  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  0000191b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  8e:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_init>:

#include <avr/io.h>

void usart_init()
{
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 0xCF; 
  a2:	8f ec       	ldi	r24, 0xCF	; 207
  a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a8:	08 95       	ret

000000aa <usart_send>:
}

void usart_send(unsigned char ch)
{
	while(!(UCSR0A &(1<<UDRE0)));
  aa:	e0 ec       	ldi	r30, 0xC0	; 192
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	95 ff       	sbrs	r25, 5
  b2:	fd cf       	rjmp	.-6      	; 0xae <usart_send+0x4>
	UDR0 = ch;
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b8:	08 95       	ret

000000ba <usart_read>:
}

void usart_read(unsigned char* ptr_ch)
{
  ba:	dc 01       	movw	r26, r24
	while(!(UCSR0A & (1<<RXC0)));
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	99 23       	and	r25, r25
  c4:	ec f7       	brge	.-6      	; 0xc0 <usart_read+0x6>
	*ptr_ch = UDR0;
  c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ca:	8c 93       	st	X, r24
  cc:	08 95       	ret

000000ce <welcome_mess>:
}

void welcome_mess()
{
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	a0 97       	sbiw	r28, 0x20	; 32
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
	unsigned char welcome[32] = "We are ready!";
  e6:	8e e0       	ldi	r24, 0x0E	; 14
  e8:	e0 e0       	ldi	r30, 0x00	; 0
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	de 01       	movw	r26, r28
  ee:	11 96       	adiw	r26, 0x01	; 1
  f0:	01 90       	ld	r0, Z+
  f2:	0d 92       	st	X+, r0
  f4:	8a 95       	dec	r24
  f6:	e1 f7       	brne	.-8      	; 0xf0 <welcome_mess+0x22>
  f8:	fe 01       	movw	r30, r28
  fa:	3f 96       	adiw	r30, 0x0f	; 15
  fc:	82 e1       	ldi	r24, 0x12	; 18
  fe:	df 01       	movw	r26, r30
 100:	1d 92       	st	X+, r1
 102:	8a 95       	dec	r24
 104:	e9 f7       	brne	.-6      	; 0x100 <welcome_mess+0x32>
	unsigned int loc = 0;
	for ( ; welcome[loc]!='\0' ; loc++)
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	88 23       	and	r24, r24
 10a:	51 f0       	breq	.+20     	; 0x120 <welcome_mess+0x52>
 10c:	8e 01       	movw	r16, r28
 10e:	0e 5f       	subi	r16, 0xFE	; 254
 110:	1f 4f       	sbci	r17, 0xFF	; 255
		usart_send(welcome[loc]);
 112:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>

void welcome_mess()
{
	unsigned char welcome[32] = "We are ready!";
	unsigned int loc = 0;
	for ( ; welcome[loc]!='\0' ; loc++)
 116:	f8 01       	movw	r30, r16
 118:	81 91       	ld	r24, Z+
 11a:	8f 01       	movw	r16, r30
 11c:	81 11       	cpse	r24, r1
 11e:	f9 cf       	rjmp	.-14     	; 0x112 <welcome_mess+0x44>
		usart_send(welcome[loc]);
}
 120:	a0 96       	adiw	r28, 0x20	; 32
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <mess>:

void mess()
{
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	a0 97       	sbiw	r28, 0x20	; 32
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
	unsigned char message[32] = "Bye!";
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	e0 e2       	ldi	r30, 0x20	; 32
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	de 01       	movw	r26, r28
 156:	11 96       	adiw	r26, 0x01	; 1
 158:	01 90       	ld	r0, Z+
 15a:	0d 92       	st	X+, r0
 15c:	8a 95       	dec	r24
 15e:	e1 f7       	brne	.-8      	; 0x158 <mess+0x22>
 160:	fe 01       	movw	r30, r28
 162:	36 96       	adiw	r30, 0x06	; 6
 164:	8b e1       	ldi	r24, 0x1B	; 27
 166:	df 01       	movw	r26, r30
 168:	1d 92       	st	X+, r1
 16a:	8a 95       	dec	r24
 16c:	e9 f7       	brne	.-6      	; 0x168 <mess+0x32>
	unsigned int loc = 0;
	for ( ; message[loc]!='\0' ; loc++)
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	88 23       	and	r24, r24
 172:	51 f0       	breq	.+20     	; 0x188 <mess+0x52>
 174:	8e 01       	movw	r16, r28
 176:	0e 5f       	subi	r16, 0xFE	; 254
 178:	1f 4f       	sbci	r17, 0xFF	; 255
	usart_send(message[loc]);
 17a:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>

void mess()
{
	unsigned char message[32] = "Bye!";
	unsigned int loc = 0;
	for ( ; message[loc]!='\0' ; loc++)
 17e:	f8 01       	movw	r30, r16
 180:	81 91       	ld	r24, Z+
 182:	8f 01       	movw	r16, r30
 184:	81 11       	cpse	r24, r1
 186:	f9 cf       	rjmp	.-14     	; 0x17a <mess+0x44>
	usart_send(message[loc]);
}
 188:	a0 96       	adiw	r28, 0x20	; 32
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <main>:

int main(void)
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	1f 92       	push	r1
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
	usart_init();
 1a8:	0e 94 4b 00 	call	0x96	; 0x96 <usart_init>
	welcome_mess();	
 1ac:	0e 94 67 00 	call	0xce	; 0xce <welcome_mess>
	unsigned char ch;
    while (1) 
    {
		usart_read(&ch);
 1b0:	ce 01       	movw	r24, r28
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	0e 94 5d 00 	call	0xba	; 0xba <usart_read>
		if (ch != 'H')
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	88 34       	cpi	r24, 0x48	; 72
 1bc:	c9 f7       	brne	.-14     	; 0x1b0 <main+0x12>
			continue;
		
		usart_read(&ch);
 1be:	ce 01       	movw	r24, r28
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	0e 94 5d 00 	call	0xba	; 0xba <usart_read>
		if (ch != 'i')
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	89 36       	cpi	r24, 0x69	; 105
 1ca:	91 f7       	brne	.-28     	; 0x1b0 <main+0x12>
			continue;

		mess();
 1cc:	0e 94 9b 00 	call	0x136	; 0x136 <mess>
 1d0:	ef cf       	rjmp	.-34     	; 0x1b0 <main+0x12>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
