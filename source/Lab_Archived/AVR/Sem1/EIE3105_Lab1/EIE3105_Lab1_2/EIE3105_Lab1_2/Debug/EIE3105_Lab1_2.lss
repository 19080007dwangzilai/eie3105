
EIE3105_Lab1_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000703  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000620  00000000  00000000  000008bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000250  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b8  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>

// Part 2
int main(void)
{
	DDRD = 0xFF;						// PD: OUT
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	while (1)							// INF Loop
	{
		PORTD = 0x55;
  84:	75 e5       	ldi	r23, 0x55	; 85
			{
				for (int k = 0 ; k <252 ; k++)
				;
			}
		}
		PORTD = 0xAA;
  86:	6a ea       	ldi	r22, 0xAA	; 170
int main(void)
{
	DDRD = 0xFF;						// PD: OUT
	while (1)							// INF Loop
	{
		PORTD = 0x55;
  88:	7b b9       	out	0x0b, r23	; 11
  8a:	40 e5       	ldi	r20, 0x50	; 80
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	0b c0       	rjmp	.+22     	; 0xa6 <main+0x26>
  90:	01 97       	sbiw	r24, 0x01	; 1
		for (int i = 0; i < 80; i++)
		{
			for (int j = 0; j < 252; j++)
			{
				for (int k = 0 ; k <252 ; k++)
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x10>
  94:	21 50       	subi	r18, 0x01	; 1
  96:	31 09       	sbc	r19, r1
	while (1)							// INF Loop
	{
		PORTD = 0x55;
		for (int i = 0; i < 80; i++)
		{
			for (int j = 0; j < 252; j++)
  98:	19 f0       	breq	.+6      	; 0xa0 <main+0x20>

#include <avr/io.h>

// Part 2
int main(void)
{
  9a:	8c ef       	ldi	r24, 0xFC	; 252
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	f8 cf       	rjmp	.-16     	; 0x90 <main+0x10>
  a0:	41 50       	subi	r20, 0x01	; 1
  a2:	51 09       	sbc	r21, r1
	DDRD = 0xFF;						// PD: OUT
	while (1)							// INF Loop
	{
		PORTD = 0x55;
		for (int i = 0; i < 80; i++)
  a4:	19 f0       	breq	.+6      	; 0xac <main+0x2c>

#include <avr/io.h>

// Part 2
int main(void)
{
  a6:	2c ef       	ldi	r18, 0xFC	; 252
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	f7 cf       	rjmp	.-18     	; 0x9a <main+0x1a>
			{
				for (int k = 0 ; k <252 ; k++)
				;
			}
		}
		PORTD = 0xAA;
  ac:	6b b9       	out	0x0b, r22	; 11
  ae:	40 e5       	ldi	r20, 0x50	; 80
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	0b c0       	rjmp	.+22     	; 0xca <main+0x4a>
  b4:	01 97       	sbiw	r24, 0x01	; 1
		for (int i = 0; i < 80; i++)
		{
			for (int j = 0; j < 252; j++)
			{
				for (int k = 0 ; k <252 ; k++)
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x34>
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
			}
		}
		PORTD = 0xAA;
		for (int i = 0; i < 80; i++)
		{
			for (int j = 0; j < 252; j++)
  bc:	19 f0       	breq	.+6      	; 0xc4 <main+0x44>
int main(void)
{
	DDRD = 0xFF;						// PD: OUT
	while (1)							// INF Loop
	{
		PORTD = 0x55;
  be:	8c ef       	ldi	r24, 0xFC	; 252
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	f8 cf       	rjmp	.-16     	; 0xb4 <main+0x34>
  c4:	41 50       	subi	r20, 0x01	; 1
  c6:	51 09       	sbc	r21, r1
				for (int k = 0 ; k <252 ; k++)
				;
			}
		}
		PORTD = 0xAA;
		for (int i = 0; i < 80; i++)
  c8:	f9 f2       	breq	.-66     	; 0x88 <main+0x8>
int main(void)
{
	DDRD = 0xFF;						// PD: OUT
	while (1)							// INF Loop
	{
		PORTD = 0x55;
  ca:	2c ef       	ldi	r18, 0xFC	; 252
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f7 cf       	rjmp	.-18     	; 0xbe <main+0x3e>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
