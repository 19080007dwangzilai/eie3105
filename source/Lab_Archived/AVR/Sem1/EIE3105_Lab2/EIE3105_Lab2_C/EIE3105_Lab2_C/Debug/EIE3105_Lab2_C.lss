
EIE3105_Lab2_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000682  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f5  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000222  00000000  00000000  00000e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003b  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 */ 

#include <avr/io.h>
#include <stdio.h>
int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0x01;			//	PC0 as Output
  88:	87 e2       	ldi	r24, 0x27	; 39
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	DDRD = 0x00;			//	PD4 Input
  92:	8a e2       	ldi	r24, 0x2A	; 42
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	fc 01       	movw	r30, r24
  98:	10 82       	st	Z, r1
	PORTD = 0x10;			//	Pull Up
  9a:	8b e2       	ldi	r24, 0x2B	; 43
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	20 e1       	ldi	r18, 0x10	; 16
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	PORTC = 0x00;			//	Initial OFF
  a4:	88 e2       	ldi	r24, 0x28	; 40
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	fc 01       	movw	r30, r24
  aa:	10 82       	st	Z, r1
	OCR0A = 0x02;		//	CTC Mode, 3 - 1 = 2
  ac:	87 e4       	ldi	r24, 0x47	; 71
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	22 e0       	ldi	r18, 0x02	; 2
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18
	TCCR0A = 0x02;		//	CTC Mode, Counter 0 with PD4 T0
  b6:	84 e4       	ldi	r24, 0x44	; 68
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	22 e0       	ldi	r18, 0x02	; 2
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	TCCR0B = 0x07;		//	Ext Source Falling Edge
  c0:	85 e4       	ldi	r24, 0x45	; 69
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	27 e0       	ldi	r18, 0x07	; 7
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
	TCNT0 = 0x00;
  ca:	86 e4       	ldi	r24, 0x46	; 70
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	10 82       	st	Z, r1
	while (1) 
    {
		while((TIFR0 & (1<<OCF0A))==0);	//	Continue roll over
  d2:	00 00       	nop
  d4:	85 e3       	ldi	r24, 0x35	; 53
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	88 2f       	mov	r24, r24
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	82 70       	andi	r24, 0x02	; 2
  e2:	99 27       	eor	r25, r25
  e4:	89 2b       	or	r24, r25
  e6:	b1 f3       	breq	.-20     	; 0xd4 <main+0x54>
		TIFR0 = (1<<OCF0A);	//	Reset OCF0A Flag
  e8:	85 e3       	ldi	r24, 0x35	; 53
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	22 e0       	ldi	r18, 0x02	; 2
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
		PORTC ^= 0x01;
  f2:	88 e2       	ldi	r24, 0x28	; 40
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	28 e2       	ldi	r18, 0x28	; 40
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	f9 01       	movw	r30, r18
  fc:	30 81       	ld	r19, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	23 27       	eor	r18, r19
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
	}
 106:	e5 cf       	rjmp	.-54     	; 0xd2 <main+0x52>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
