
EIE3105_Lab2_B_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084f  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000649  00000000  00000000  00000b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044b  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c0  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000022  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001a7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  78:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Timer_1_Delay>:
//	Create 1 s Delay
void Timer_1_Delay()
{
// Timer 1 16 bit timer with prescaler = 1024
// 1 * 16M / 1024 = 15625
	TCNT1H = 0xC2;		
  80:	82 ec       	ldi	r24, 0xC2	; 194
  82:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0xF7;		// 65536 - 15625 = 49911 = 0xC2F7
  86:	87 ef       	ldi	r24, 0xF7	; 247
  88:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1A = 0x00;		// Normal Mode
  8c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x05;		// Prescaler = 1024
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while ((TIFR1 &(1<<TOV1))==0);	// Continue Until Overflow
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	fe cf       	rjmp	.-4      	; 0x96 <Timer_1_Delay+0x16>
	TCCR1B = 0x00;		// Stop Timer 1
  9a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIFR1 = (1<<TOV1);	// Reset TOV1
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	86 bb       	out	0x16, r24	; 22
  a2:	08 95       	ret

000000a4 <Timer_1_Delay_5>:
}

//	Create 5 s Delay
void Timer_1_Delay_5()
{
	Timer_1_Delay();
  a4:	0e 94 40 00 	call	0x80	; 0x80 <Timer_1_Delay>
	Timer_1_Delay();
  a8:	0e 94 40 00 	call	0x80	; 0x80 <Timer_1_Delay>
	Timer_1_Delay();
  ac:	0e 94 40 00 	call	0x80	; 0x80 <Timer_1_Delay>
	Timer_1_Delay();
  b0:	0e 94 40 00 	call	0x80	; 0x80 <Timer_1_Delay>
	Timer_1_Delay();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <Timer_1_Delay>
  b8:	08 95       	ret

000000ba <Timer_1_Delay_2>:
//	Create 0.2 s Delay
void Timer_1_Delay_2()
{
	// Timer 1 16 bit timer with prescaler = 1024
	// 0.2 * 16M / 1024 = 3125
	TCNT1H = 0xF3;
  ba:	83 ef       	ldi	r24, 0xF3	; 243
  bc:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0xCB;		// 65536 - 3125 = 62411 = 0xF3CB
  c0:	8b ec       	ldi	r24, 0xCB	; 203
  c2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1A = 0x00;		// Normal Mode
  c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x05;		// Prescaler = 1024
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while ((TIFR1 &(1<<TOV1))==0);	// Continue Until Overflow
  d0:	b0 9b       	sbis	0x16, 0	; 22
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <Timer_1_Delay_2+0x16>
	TCCR1B = 0x00;		// Stop Timer 1
  d4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIFR1 = (1<<TOV1);	// Reset TOV1
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	86 bb       	out	0x16, r24	; 22
  dc:	08 95       	ret

000000de <state1>:
}

//	State 1
void state1()
{
	PORTC = 0x10;		//	Light 1 Red
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	88 b9       	out	0x08, r24	; 8
	PORTB = 0x21;		//	Light 2 Green Light 3 Red
  e2:	81 e2       	ldi	r24, 0x21	; 33
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret

000000e8 <state2>:
}

//	State 2
void state2()
{
	PORTC = 0x10;		//	Light 1 Red
  e8:	80 e1       	ldi	r24, 0x10	; 16
  ea:	88 b9       	out	0x08, r24	; 8
	PORTB = 0x11;		//	Light 2 Yellow Light 3 Red 
  ec:	81 e1       	ldi	r24, 0x11	; 17
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	08 95       	ret

000000f2 <state3>:
}

//	State 3
void state3()
{
	PORTC = 0x10;		//	Light 1 Red
  f2:	80 e1       	ldi	r24, 0x10	; 16
  f4:	88 b9       	out	0x08, r24	; 8
	PORTB = 0x09;		//	Light 2 Red Light 3 Red
  f6:	89 e0       	ldi	r24, 0x09	; 9
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	08 95       	ret

000000fc <state4>:
}

//	State 4
void state4()
{
	PORTC = 0x10;		// Light 1 Red
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	88 b9       	out	0x08, r24	; 8
	PORTB = 0x0B;		// Light 2 Red Light 3 Red + Yellow
 100:	8b e0       	ldi	r24, 0x0B	; 11
 102:	85 b9       	out	0x05, r24	; 5
 104:	08 95       	ret

00000106 <state5>:
}

//	State 5
void state5()
{
	PORTC = 0x20;		//	Light 1 Green
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	88 b9       	out	0x08, r24	; 8
	PORTB = 0x0C;		//	Light 2 Red Light 3 Green
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	08 95       	ret

00000110 <state6>:
}

//	State 6
void state6()
{
 110:	cf 93       	push	r28
	PORTC = 0x20;		// Light 1 Green
 112:	c0 e2       	ldi	r28, 0x20	; 32
 114:	c8 b9       	out	0x08, r28	; 8
	PORTB =	0x0A;		// Light 2 Red Light 3 Green 
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	85 b9       	out	0x05, r24	; 5
	Timer_1_Delay_2();	// Call 0.2 s Delay
 11a:	0e 94 5d 00 	call	0xba	; 0xba <Timer_1_Delay_2>
	PORTC = 0x00;		//	Blinking
 11e:	18 b8       	out	0x08, r1	; 8
	Timer_1_Delay_2();	// Call 0.2 s Delay
 120:	0e 94 5d 00 	call	0xba	; 0xba <Timer_1_Delay_2>
	PORTC = 0x20;		
 124:	c8 b9       	out	0x08, r28	; 8
	Timer_1_Delay_2();	// Call 0.2 s Delay
 126:	0e 94 5d 00 	call	0xba	; 0xba <Timer_1_Delay_2>
	PORTC = 0x00;		//	Blinking
 12a:	18 b8       	out	0x08, r1	; 8
	Timer_1_Delay_2();	// Call 0.2 s Delay
 12c:	0e 94 5d 00 	call	0xba	; 0xba <Timer_1_Delay_2>
	PORTC = 0x20;
 130:	c8 b9       	out	0x08, r28	; 8
	Timer_1_Delay_2();	// Call 0.2 s Delay
 132:	0e 94 5d 00 	call	0xba	; 0xba <Timer_1_Delay_2>
}
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <state7>:

//	State 7
void state7()
{
	PORTC = 0x10;		//	Light 1 Red
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	88 b9       	out	0x08, r24	; 8
	PORTB = 0x09;		//	Light 2 Red Light 3 Red
 13e:	89 e0       	ldi	r24, 0x09	; 9
 140:	85 b9       	out	0x05, r24	; 5
 142:	08 95       	ret

00000144 <state8>:
}

//	State 8
void state8()
{
	PORTC = 0x10;		//	Light 1 Red
 144:	80 e1       	ldi	r24, 0x10	; 16
 146:	88 b9       	out	0x08, r24	; 8
	PORTB = 0x19;		//	Light 1 Red Light 2 Red + Yellow Light 3 Red
 148:	89 e1       	ldi	r24, 0x19	; 25
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	08 95       	ret

0000014e <main>:
void state7();
void state8();

int main(void)
{
    DDRB = 0x3F;			// PB0 - 5 as Output
 14e:	8f e3       	ldi	r24, 0x3F	; 63
 150:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x30;			// PC 4 - 5 as Output
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	87 b9       	out	0x07, r24	; 7
	PORTB = 0x00;			// Initial LOW
 156:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;			// Initial LOW
 158:	18 b8       	out	0x08, r1	; 8
    while (1)				// INF Loop
    {
		state1();			// 1 R 2 G 3 R
 15a:	0e 94 6f 00 	call	0xde	; 0xde <state1>
		Timer_1_Delay_5();	// Call 5 s Delay
 15e:	0e 94 52 00 	call	0xa4	; 0xa4 <Timer_1_Delay_5>
		state2();			// 1 R 2 Y 3 R
 162:	0e 94 74 00 	call	0xe8	; 0xe8 <state2>
		Timer_1_Delay();	// Call 1 s Delay
 166:	0e 94 40 00 	call	0x80	; 0x80 <Timer_1_Delay>
		state3();			// 1 R 2 R 3 R
 16a:	0e 94 79 00 	call	0xf2	; 0xf2 <state3>
		Timer_1_Delay();	// Call 1 s Delay
 16e:	0e 94 40 00 	call	0x80	; 0x80 <Timer_1_Delay>
		state4();			// 1 R 2 R 3 R+Y
 172:	0e 94 7e 00 	call	0xfc	; 0xfc <state4>
		Timer_1_Delay();	// Call 1 s Delay
 176:	0e 94 40 00 	call	0x80	; 0x80 <Timer_1_Delay>
		state5();			// 1 G 2 R 3 G
 17a:	0e 94 83 00 	call	0x106	; 0x106 <state5>
		Timer_1_Delay_5();	// Call 1 s Delay
 17e:	0e 94 52 00 	call	0xa4	; 0xa4 <Timer_1_Delay_5>
		state6();			// 1 GB 2 R 3 R
 182:	0e 94 88 00 	call	0x110	; 0x110 <state6>
		state7();			// 1 R 2 R 3 R
 186:	0e 94 9d 00 	call	0x13a	; 0x13a <state7>
		Timer_1_Delay();	// Call 1 s Delay
 18a:	0e 94 40 00 	call	0x80	; 0x80 <Timer_1_Delay>
		state8();			// 1 R 2 R+Y 3 R
 18e:	0e 94 a2 00 	call	0x144	; 0x144 <state8>
		Timer_1_Delay();	// Call 1 s Delay
 192:	0e 94 40 00 	call	0x80	; 0x80 <Timer_1_Delay>
 196:	e1 cf       	rjmp	.-62     	; 0x15a <main+0xc>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
