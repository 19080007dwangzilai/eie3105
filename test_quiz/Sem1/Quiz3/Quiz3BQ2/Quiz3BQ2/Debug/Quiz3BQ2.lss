
Quiz3BQ2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000230  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000230  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010c  0080010c  000002d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a0  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000667  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000352  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000014ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f5  00000000  00000000  0000195b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  9e:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_2>:
unsigned char str2[5] = "INT1";
unsigned int loc = 0;
unsigned char input = '\0';

ISR(INT1_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	if (tim == 1)
  b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tim>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	91 f4       	brne	.+36     	; 0xe2 <__vector_2+0x3c>
	{
		TCCR1B = 0x00;
  be:	e1 e8       	ldi	r30, 0x81	; 129
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
		OCR1AH = 0x7A;
  c4:	8a e7       	ldi	r24, 0x7A	; 122
  c6:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL = 0x11;
  ca:	81 e1       	ldi	r24, 0x11	; 17
  cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		tim = 2;
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tim>
		tim_flag = 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tim_flag>
		TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	80 83       	st	Z, r24
  e0:	12 c0       	rjmp	.+36     	; 0x106 <__vector_2+0x60>
	}
	else if (tim == 2)
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	81 f4       	brne	.+32     	; 0x106 <__vector_2+0x60>
	{
		TCCR1B = 0x00;
  e6:	e1 e8       	ldi	r30, 0x81	; 129
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	10 82       	st	Z, r1
		OCR1AH = 0x3D;
  ec:	8d e3       	ldi	r24, 0x3D	; 61
  ee:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL = 0x09;
  f2:	89 e0       	ldi	r24, 0x09	; 9
  f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		tim = 1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tim>
		tim_flag = 1;
  fe:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tim_flag>
		TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);
 102:	8d e0       	ldi	r24, 0x0D	; 13
 104:	80 83       	st	Z, r24
	}
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
	tim_flag = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tim_flag>
};
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_19>:

ISR(USART_UDRE_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	if (tim == 1 && tim_flag == 1)
 146:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tim>
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	01 f5       	brne	.+64     	; 0x18e <__vector_19+0x5a>
 14e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tim_flag>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	e9 f5       	brne	.+122    	; 0x1d0 <__vector_19+0x9c>
	{
		if (str1[loc]!='\0')
 156:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 15a:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__data_end+0x1>
 15e:	eb 5f       	subi	r30, 0xFB	; 251
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	80 81       	ld	r24, Z
 164:	88 23       	and	r24, r24
 166:	61 f0       	breq	.+24     	; 0x180 <__vector_19+0x4c>
		{
			UDR0 = str1[loc];
 168:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			loc++;
 16c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 170:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 17a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 17e:	28 c0       	rjmp	.+80     	; 0x1d0 <__vector_19+0x9c>
		}
		else
		{
			tim_flag = 0;
 180:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tim_flag>
			loc = 0;
 184:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 188:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 18c:	21 c0       	rjmp	.+66     	; 0x1d0 <__vector_19+0x9c>
		}
	}
	else if (tim == 2 && tim_flag == 1)
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	f9 f4       	brne	.+62     	; 0x1d0 <__vector_19+0x9c>
 192:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tim_flag>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	d9 f4       	brne	.+54     	; 0x1d0 <__vector_19+0x9c>
	{
		if (str2[loc]!='\0')
 19a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 19e:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__data_end+0x1>
 1a2:	e0 50       	subi	r30, 0x00	; 0
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	80 81       	ld	r24, Z
 1a8:	88 23       	and	r24, r24
 1aa:	61 f0       	breq	.+24     	; 0x1c4 <__vector_19+0x90>
		{
			UDR0 = str2[loc];
 1ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			loc++;
 1b0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1b4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 1be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <__vector_19+0x9c>
		}
		else
		{
			tim_flag = 0;
 1c4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tim_flag>
			loc = 0;
 1c8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 1cc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		}
	}
};
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <usart_init>:

void usart_init()
{
	UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<UDRE0) | (1<<RXCIE0);
 1e2:	88 eb       	ldi	r24, 0xB8	; 184
 1e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 0x67;
 1ee:	87 e6       	ldi	r24, 0x67	; 103
 1f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1f4:	08 95       	ret

000001f6 <timer1_init>:
}

void timer1_init()
{
	OCR1AH = 0x3D;
 1f6:	8d e3       	ldi	r24, 0x3D	; 61
 1f8:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = 0x08;
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);
 202:	8d e0       	ldi	r24, 0x0D	; 13
 204:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<OCIE1A);
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 20e:	08 95       	ret

00000210 <ext_init>:
}

void ext_init()
{
	PORTD |= (1<<3);
 210:	5b 9a       	sbi	0x0b, 3	; 11
	EIMSK |= (1<<INT1);
 212:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA = (1<<ISC11) | (1<<ISC10);
 214:	8c e0       	ldi	r24, 0x0C	; 12
 216:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 21a:	08 95       	ret

0000021c <main>:
}

int main(void)
{    
	usart_init();
 21c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <usart_init>
	timer1_init();
 220:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <timer1_init>
	ext_init();
 224:	0e 94 08 01 	call	0x210	; 0x210 <ext_init>
	sei();
 228:	78 94       	sei
 22a:	ff cf       	rjmp	.-2      	; 0x22a <main+0xe>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
